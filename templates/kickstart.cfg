# basics
text
skipx
cmdline
install
reboot
firstboot --disable
{% if hostvars[item].yum_proxy is defined %}
url --url="{{ location }}" --proxy={{ hostvars[item].yum_proxy }}
{% else %}
url --url="{{ location }}"
{% endif %}

# localization
lang en_GB
keyboard fi
timezone --utc Europe/Helsinki

# repos
{% if repos is defined %}
{% for repo in repos %}
{% if hostvars[item].yum_proxy is defined %}
repo --name="{{ repo.name }}" --baseurl="{{ repo.url }}" --proxy={{ hostvars[item].yum_proxy }}
{% else %}
repo --name="{{ repo.name }}" --baseurl="{{ repo.url }}"
{% endif %}
{% endfor %}
{% endif %}

# network

network --onboot=yes --bootproto=dhcp --device={{ hostvars[item].internal_interface }} --noipv6
{% if hostvars[item].external_interface is defined %}
network --onboot={{hostvars[item].enable_ext_nic}} --device={{ hostvars[item].external_interface }} --bootproto=static --ip={{ hostvars[item].ext_ip_addr }} --netmask={{ hostvars[item].ext_net_mask }} --nameserver={{hostvars[item].nameserver1}} --hostname={{ hostvars[item].fqdn }} --gateway={{hostvars[item].ext_gateway }} --noipv6
{% endif %}

# firewall
firewall --enabled --service=ssh

# authentication
rootpw --iscrypted {{ rootpwhash }}
authconfig --useshadow --passalgo=sha512 --kickstart
selinux --disabled

# disks
{{ hostvars[item].kickstart_partitions }}

%packages --nobase
@core
@server-policy
vim-enhanced
openssh-clients
{{ hostvars[item].kickstart_packages }}
%end

################################################################################

%post --log=/root/post-ks-log


{% if hostvars[item].extdefroute is defined %}
/usr/bin/sed -i 's/DEFROUTE=yes/DEFROUTE=no/g' /etc/sysconfig/network-scripts/ifcfg-{{ hostvars[item].internal_interface }}
/usr/bin/sed -i 's/DEFROUTE=no/DEFROUTE=yes/g' /etc/sysconfig/network-scripts/ifcfg-{{ hostvars[item].external_interface }}
{% endif %}

/usr/bin/yum clean all
/usr/bin/yum update -y --skip-broken

/usr/bin/mkdir /root/.ssh && /usr/bin/chmod 700 /root/.ssh
{% if root_keys is defined %}
{% for root_key in root_keys %} 
/usr/bin/echo "{{ root_key }}" >> /root/.ssh/authorized_keys
{% endfor %}
{% endif %}
/usr/bin/chmod 600 /root/.ssh/authorized_keys

/usr/bin/systemctl stop NetworkManager.service
/usr/bin/systemctl disable NetworkManager.service

{% if hostvars[item].ansible_pull_kickstart == true %}
# Only run ansible-pull if ansible_pull_kickstart is true
echo "Grabbing ansible-pull-script.sh"
/usr/bin/curl http://{{ kickstart_server_ip }}/ansible-pull-script.sh > /usr/local/bin/ansible-pull-script.sh
if [ $? == 0 ]; then
# Run the ansible-pull-script.sh regularly via cron
# This so we don't run the script in the chroot during kickstart
/usr/bin/ansible -m cron -a "name='ansible-pull' user=root job='/bin/bash /usr/local/bin/ansible-pull-script.sh' minute="*/15" cron_file=ansible-pull" localhost
else
echo "could not get /usr/local/bin/ansible-pull-script.sh from http://{{ kickstart_server_ip }}/ansible-pull-script.sh"
fi
{% endif %}

%end
#
